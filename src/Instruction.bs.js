// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_HashMap = require("rescript/lib/js/belt_HashMap.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var UnSupportedAddressingMode = /* @__PURE__ */Caml_exceptions.create("Instruction.UnSupportedAddressingMode");

var ErrorInstruction = /* @__PURE__ */Caml_exceptions.create("Instruction.ErrorInstruction");

function $$new(bin, code, bytes, cycles, mode) {
  return [
          bin,
          {
            bin: bin,
            code: code,
            bytes: bytes,
            cycles: cycles,
            mode: mode
          }
        ];
}

function hash(a) {
  return a;
}

var eq = Caml_obj.caml_equal;

var IntHash = Belt_Id.MakeHashable({
      hash: hash,
      eq: eq
    });

var instruction_table = Belt_HashMap.fromArray([
      [
        0,
        {
          bin: 0,
          code: /* BRK */10,
          bytes: 1,
          cycles: 7,
          mode: /* NoneAddressing */9
        }
      ],
      [
        169,
        {
          bin: 169,
          code: /* LDA */29,
          bytes: 2,
          cycles: 2,
          mode: /* Immediate */0
        }
      ],
      [
        165,
        {
          bin: 165,
          code: /* LDA */29,
          bytes: 2,
          cycles: 3,
          mode: /* ZeroPage */1
        }
      ],
      [
        181,
        {
          bin: 181,
          code: /* LDA */29,
          bytes: 2,
          cycles: 4,
          mode: /* ZeroPage_X */2
        }
      ],
      [
        173,
        {
          bin: 173,
          code: /* LDA */29,
          bytes: 3,
          cycles: 4,
          mode: /* Absolute */4
        }
      ],
      [
        189,
        {
          bin: 189,
          code: /* LDA */29,
          bytes: 3,
          cycles: 4,
          mode: /* Absolute_X */5
        }
      ],
      [
        185,
        {
          bin: 185,
          code: /* LDA */29,
          bytes: 3,
          cycles: 4,
          mode: /* Absolute_Y */6
        }
      ],
      [
        161,
        {
          bin: 161,
          code: /* LDA */29,
          bytes: 2,
          cycles: 6,
          mode: /* Indirect_X */7
        }
      ],
      [
        177,
        {
          bin: 177,
          code: /* LDA */29,
          bytes: 2,
          cycles: 5,
          mode: /* Indirect_Y */8
        }
      ],
      [
        170,
        {
          bin: 170,
          code: /* TAX */50,
          bytes: 1,
          cycles: 2,
          mode: /* NoneAddressing */9
        }
      ],
      [
        232,
        {
          bin: 232,
          code: /* INX */25,
          bytes: 1,
          cycles: 2,
          mode: /* NoneAddressing */9
        }
      ],
      [
        200,
        {
          bin: 200,
          code: /* INY */26,
          bytes: 1,
          cycles: 2,
          mode: /* NoneAddressing */9
        }
      ],
      [
        133,
        {
          bin: 133,
          code: /* STA */47,
          bytes: 2,
          cycles: 3,
          mode: /* ZeroPage */1
        }
      ],
      [
        149,
        {
          bin: 149,
          code: /* STA */47,
          bytes: 2,
          cycles: 4,
          mode: /* ZeroPage_X */2
        }
      ],
      [
        141,
        {
          bin: 141,
          code: /* STA */47,
          bytes: 3,
          cycles: 4,
          mode: /* Absolute */4
        }
      ],
      [
        157,
        {
          bin: 157,
          code: /* STA */47,
          bytes: 3,
          cycles: 5,
          mode: /* Absolute_X */5
        }
      ],
      [
        153,
        {
          bin: 153,
          code: /* STA */47,
          bytes: 3,
          cycles: 5,
          mode: /* Absolute_Y */6
        }
      ],
      [
        129,
        {
          bin: 129,
          code: /* STA */47,
          bytes: 2,
          cycles: 6,
          mode: /* Indirect_X */7
        }
      ],
      [
        145,
        {
          bin: 145,
          code: /* STA */47,
          bytes: 2,
          cycles: 6,
          mode: /* Indirect_Y */8
        }
      ]
    ], IntHash);

exports.UnSupportedAddressingMode = UnSupportedAddressingMode;
exports.ErrorInstruction = ErrorInstruction;
exports.$$new = $$new;
exports.IntHash = IntHash;
exports.instruction_table = instruction_table;
/* IntHash Not a pure module */
