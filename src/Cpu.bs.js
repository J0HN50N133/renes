// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("rescript/lib/js/caml_array.js");

function $$new(param) {
  return {
          register_a: 0,
          register_x: 0,
          register_y: 0,
          stack_pointer: 0,
          status: 0,
          pc: 0
        };
}

function update_zero_and_negative_flags(cpu, result) {
  cpu.status = result === 0 ? cpu.status | 2 : cpu.status & 253;
  cpu.status = (result & 128) === 0 ? cpu.status & 63 : cpu.status | 128;
  
}

function lda(cpu, param) {
  cpu.register_a = param;
  return update_zero_and_negative_flags(cpu, cpu.register_a);
}

function tax(cpu) {
  cpu.register_x = cpu.register_a;
  return update_zero_and_negative_flags(cpu, cpu.register_x);
}

function interpret(cpu, program) {
  cpu.register_a = 0;
  cpu.status = 0;
  cpu.pc = 0;
  var $$break = false;
  while(!$$break) {
    var op = Caml_array.get(program, cpu.pc);
    cpu.pc = cpu.pc + 1 | 0;
    if (op === 170 || op === 169) {
      if (op >= 170) {
        tax(cpu);
      } else {
        var param = Caml_array.get(program, cpu.pc);
        cpu.pc = cpu.pc + 1 | 0;
        lda(cpu, param);
      }
    } else if (op === 0) {
      $$break = true;
    }
    
  };
  
}

exports.$$new = $$new;
exports.update_zero_and_negative_flags = update_zero_and_negative_flags;
exports.lda = lda;
exports.tax = tax;
exports.interpret = interpret;
/* No side effect */
